{"version":3,"sources":["core/components/controls/Input.tsx","store/actions/auth.actions.ts","hoc/MainLayout/Navbar/Navbar.tsx","hoc/MainLayout/SideNav/SideNav.tsx","hoc/MainLayout/MainLayout.tsx","auth/LoginForm/LoginForm.tsx","auth/registerForm/RegisterForm.tsx","auth/PasswordRecoveryForm/PasswordRecoveryForm.tsx","hoc/AuthLayout/AuthLayout.tsx","App.tsx","serviceWorker.ts","store/reducers/auth.reducer.ts","store/reducers/index.ts","core/axios.ts","store/effects/auth.effects.ts","store/effects/index.ts","index.tsx"],"names":["ControlTypesEnum","CHECK_AUTHENTICATED","checkAuthenticatedAction","type","CHECK_AUTHENTICATED_SUCESS","checkAuthenticatedSuccessAction","user","payload","CHECK_AUTHENTICATED_FAIL","checkAuthenticatedFailAction","LOGIN_USER","loginUserAction","LOGIN_USER_SUCCESS","loginUserSuccessAction","LOGIN_USER_FAIL","loginUserFailAction","error","REGISTER_USER","registerUserAction","REGISTER_USER_SUCCESS","registerUserSuccessAction","LOGOUT_USER","logoutUserAction","LOGOUT_USER_SUCCESS","logoutUserSuccessAction","SEND_RECOVERY_CODE","sendRecoveryCodeAction","identification","SEND_RECOVERY_CODE_SUCCESS","sendRecoveryCodeSuccessAction","SUBMIT_RECOVERY_CODE","submitRecoveryCodeAction","SUBMIT_RECOVERY_CODE_SUCCESS","submitRecoveryCodeSuccessAction","RESET_PASSWORD","resetPasswordAction","RESET_PASSWORD_SUCCESS","resetPasswordSuccessAction","AUTH_ACTION_FAIL","authActionFail","props","dispatch","useDispatch","currentUser","useSelector","state","auth","console","log","Navbar","Header","className","Body","Nav","Item","eventKey","icon","Icon","Dropdown","title","pullRight","name","onClick","useState","expanded","setExpanded","style","width","height","Sidenav","activeKey","onSelect","handleSelect","placement","Menu","IconButton","size","key","useHistory","push","component","TEXTAREA","FormControl","disabled","readOnly","rows","componentClass","SELECT","data","PASSWORD","passwordVisible","setPasswordVisible","FormGroup","InputGroup","inside","Addon","cursor","DATE","accepter","DatePicker","TEXT","ControlLabel","label","Schema","Types","StringType","NumberType","model","Model","isRequiredOrEmpty","password","minLength","loading","formValue","setFormValue","form","useRef","submitLogin","useCallback","current","check","Message","showIcon","description","message","Form","ref","fluid","onChange","Input","to","Button","appearance","DateType","isRequired","email","isEmail","maxLength","lastname","birthdate","verifyPassword","addRule","value","Date","submitRegister","Grid","Row","Col","sm","md","resetPassModel","currentResetEmail","stage","setStage","sendCodeFormValue","setSendCodeFormValue","code","submitCodeFormValue","setSubmitCodeFormValue","resetPassFormValue","setResetPassFormValue","sendCode","submitCode","resetPassword","HelpBlock","includes","Container","Content","FlexboxGrid","justify","align","colspan","Panel","header","exact","path","match","render","color","bordered","LoginForm","RegisterForm","PasswordRecoveryForm","Footer","App","checked","authenticatedChecked","useEffect","mainclasses","join","AuthLayout","MainLayout","Loader","content","Boolean","window","location","hostname","initialState","combineReducers","action","authActions","api","axios","create","baseURL","defaults","withCredentials","checkAuthenticatedEffect","loginUserEffect","registerUserEffect","logoutUserEffect","sendRecoveryCodeEffect","submitRecoveryCodeEffect","resetPasswordEffect","get","put","post","stack","status","response","watchAuth","takeEvery","composeEnhancers","compose","sagaMiddleware","createSagaMiddleware","store","createStore","reducer","applyMiddleware","run","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d25b23f2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  FormGroup,\r\n  ControlLabel,\r\n  FormControl,\r\n  InputGroup,\r\n  Icon,\r\n  DatePicker,\r\n} from 'rsuite';\r\n\r\ninterface InputProps {\r\n  type?: 'text' | 'checkbox' | 'textarea' | 'select' | 'password' | 'date';\r\n  label?: string;\r\n  name: string;\r\n  disabled?: boolean;\r\n  readonly?: boolean;\r\n\r\n  rows?: number;\r\n  data?: any[];\r\n}\r\n\r\nexport enum ControlTypesEnum {\r\n  TEXT = 'text',\r\n  CHECKBOX = 'checkbox',\r\n  TEXTAREA = 'textarea',\r\n  SELECT = 'select',\r\n  PASSWORD = 'password',\r\n  DATE = 'date',\r\n}\r\n\r\nexport default (props: InputProps) => {\r\n  let component = null;\r\n  switch (props.type) {\r\n    case ControlTypesEnum.TEXTAREA:\r\n      component = (\r\n        <FormControl\r\n          name={props.name}\r\n          disabled={props.disabled}\r\n          readOnly={props.disabled}\r\n          rows={props.rows ? props.rows : 5}\r\n          componentClass='textarea'\r\n        />\r\n      );\r\n      break;\r\n    case ControlTypesEnum.SELECT:\r\n      component = (\r\n        <FormControl\r\n          name={props.name}\r\n          data={props.data}\r\n          disabled={props.disabled}\r\n          readOnly={props.disabled}\r\n        />\r\n      );\r\n      break;\r\n    case ControlTypesEnum.PASSWORD:\r\n      const [passwordVisible, setPasswordVisible] = useState(false);\r\n      component = (\r\n        <FormGroup>\r\n          <InputGroup style={{ width: '100%' }} inside>\r\n            <FormControl\r\n              name={props.name}\r\n              data={props.data}\r\n              disabled={props.disabled}\r\n              readOnly={props.disabled}\r\n              type={passwordVisible ? 'text' : 'password'}\r\n            />\r\n            <InputGroup.Addon\r\n              style={{ cursor: 'pointer' }}\r\n              onClick={() => setPasswordVisible(!passwordVisible)}\r\n            >\r\n              <Icon icon={passwordVisible ? 'eye-slash' : 'eye'} />\r\n            </InputGroup.Addon>\r\n          </InputGroup>\r\n        </FormGroup>\r\n      );\r\n      break;\r\n    case ControlTypesEnum.DATE:\r\n      component = (\r\n        <FormControl\r\n          style={{ width: '100%' }}\r\n          accepter={DatePicker}\r\n          name={props.name}\r\n          disabled={props.disabled}\r\n          readOnly={props.disabled}\r\n        />\r\n      );\r\n      break;\r\n    case ControlTypesEnum.TEXT:\r\n    default:\r\n      component = (\r\n        <FormControl\r\n          name={props.name}\r\n          disabled={props.disabled}\r\n          readOnly={props.disabled}\r\n        />\r\n      );\r\n      break;\r\n  }\r\n  return (\r\n    <FormGroup>\r\n      <ControlLabel>{props.label}</ControlLabel>\r\n      {component}\r\n    </FormGroup>\r\n  );\r\n};\r\n","import { User } from '../../core/models/User.model';\r\nimport { Action } from './action.model';\r\nimport { ApiError } from '../../core/models/ApiError.model';\r\n\r\nexport const CHECK_AUTHENTICATED = 'CHECK_AUTHENTICATED';\r\nexport const checkAuthenticatedAction = (): Action => ({\r\n  type: CHECK_AUTHENTICATED,\r\n});\r\nexport const CHECK_AUTHENTICATED_SUCESS = 'CHECK_AUTHENTICATED_SUCCESS';\r\nexport const checkAuthenticatedSuccessAction = (user: User): Action => ({\r\n  type: CHECK_AUTHENTICATED_SUCESS,\r\n  payload: user,\r\n});\r\nexport const CHECK_AUTHENTICATED_FAIL = 'CHECK_AUTHENTICATED_FAIL';\r\nexport const checkAuthenticatedFailAction = (): Action => ({\r\n  type: CHECK_AUTHENTICATED_FAIL,\r\n});\r\n\r\nexport const LOGIN_USER = 'LOGIN_USER';\r\nexport const loginUserAction = (payload: {\r\n  identification: string;\r\n  password: string;\r\n}): Action => ({ type: LOGIN_USER, payload });\r\nexport const LOGIN_USER_SUCCESS = 'LOGIN_USER_SUCCESS';\r\nexport const loginUserSuccessAction = (user: User): Action => ({\r\n  type: LOGIN_USER_SUCCESS,\r\n  payload: user,\r\n});\r\nexport const LOGIN_USER_FAIL = 'LOGIN_USER_FAIL';\r\nexport const loginUserFailAction = (error: ApiError) => ({\r\n  type: LOGIN_USER_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const REGISTER_USER = 'REGISTER_USER';\r\nexport const registerUserAction = (payload: User): Action => ({\r\n  type: REGISTER_USER,\r\n  payload,\r\n});\r\n\r\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\r\nexport const registerUserSuccessAction = (payload: User): Action => ({\r\n  type: REGISTER_USER_SUCCESS,\r\n  payload,\r\n});\r\n\r\nexport const LOGOUT_USER = 'LOGOUT_USER';\r\nexport const logoutUserAction = (): Action => ({\r\n  type: LOGOUT_USER,\r\n});\r\n\r\nexport const LOGOUT_USER_SUCCESS = 'LOGOUT_USER_SUCCESS';\r\nexport const logoutUserSuccessAction = (): Action => ({\r\n  type: LOGOUT_USER_SUCCESS,\r\n});\r\n\r\nexport const SEND_RECOVERY_CODE = 'SEND_RECOVERY_CODE';\r\nexport const sendRecoveryCodeAction = (identification: string): Action => ({\r\n  type: SEND_RECOVERY_CODE,\r\n  payload: identification,\r\n});\r\n\r\nexport const SEND_RECOVERY_CODE_SUCCESS = 'SEND_RECOVERY_CODE_SUCCESS';\r\nexport const sendRecoveryCodeSuccessAction = (payload: {\r\n  email: string;\r\n  message: string;\r\n}) => ({\r\n  type: SEND_RECOVERY_CODE_SUCCESS,\r\n  payload,\r\n});\r\n\r\nexport const SUBMIT_RECOVERY_CODE = 'SUBMIT_RECOVERY_CODE';\r\nexport const submitRecoveryCodeAction = (payload: {\r\n  email: string;\r\n  code: string;\r\n}) => ({\r\n  type: SUBMIT_RECOVERY_CODE,\r\n  payload,\r\n});\r\n\r\nexport const SUBMIT_RECOVERY_CODE_SUCCESS = 'SUBMIT_RECOVERY_CODE_SUCCESS';\r\nexport const submitRecoveryCodeSuccessAction = (payload: any) => ({\r\n  type: SUBMIT_RECOVERY_CODE_SUCCESS,\r\n  payload,\r\n});\r\n\r\nexport const RESET_PASSWORD = 'RESET_PASSWORD';\r\nexport const resetPasswordAction = (payload: any): Action => ({\r\n  type: RESET_PASSWORD,\r\n  payload,\r\n});\r\n\r\nexport const RESET_PASSWORD_SUCCESS = 'RESET_PASSWORD_SUCCESS';\r\nexport const resetPasswordSuccessAction = (payload: {\r\n  message: string;\r\n}): Action => ({\r\n  type: RESET_PASSWORD_SUCCESS,\r\n  payload,\r\n});\r\n\r\nexport const AUTH_ACTION_FAIL = 'AUTH_ACTION_FAIL';\r\nexport const authActionFail = (error: ApiError): Action => ({\r\n  type: AUTH_ACTION_FAIL,\r\n  payload: error,\r\n});\r\n","import React, { SyntheticEvent } from 'react';\r\nimport { Navbar, Nav, Icon, Dropdown, NavbarProps } from 'rsuite';\r\n\r\nimport './Navbar.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState } from '../../../store/reducers';\r\nimport { User } from '../../../core/models/User.model';\r\nimport { logoutUserAction } from '../../../store/actions/auth.actions';\r\n\r\nexport default (props: NavbarProps) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const logoutUser = () => {\r\n    dispatch(logoutUserAction());\r\n  }\r\n  \r\n  const currentUser: User | null = useSelector((state: AppState) => state.auth.currentUser);\r\n  console.log(currentUser);\r\n  return (\r\n    <Navbar {...props}>\r\n      <Navbar.Header>\r\n          <h6 className=\"navbar-brand logo\">URUOnline</h6>\r\n      </Navbar.Header>\r\n      <Navbar.Body>\r\n        <Nav>\r\n          <Nav.Item eventKey='1' icon={<Icon icon='home' />}>\r\n            Home\r\n          </Nav.Item>\r\n          <Nav.Item eventKey='2'>News</Nav.Item>\r\n          <Nav.Item eventKey='3'>Products</Nav.Item>\r\n          <Dropdown title='About'>\r\n            <Dropdown.Item eventKey='4'>Company</Dropdown.Item>\r\n            <Dropdown.Item eventKey='5'>Team</Dropdown.Item>\r\n            <Dropdown.Item eventKey='6'>Contact</Dropdown.Item>\r\n          </Dropdown>\r\n        </Nav>\r\n        <Nav pullRight>\r\n        <Dropdown title={currentUser?.name}>\r\n            <Dropdown.Item eventKey='4' onClick={logoutUser}>Cerrar Sesión</Dropdown.Item>\r\n            <Dropdown.Item eventKey='5'>Team</Dropdown.Item>\r\n            <Dropdown.Item eventKey='6'>Contact</Dropdown.Item>\r\n          </Dropdown>\r\n        </Nav>\r\n      </Navbar.Body>\r\n    </Navbar>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Sidenav, Nav, Dropdown, Icon, IconButton } from 'rsuite';\r\n\r\nimport './SideNav.css';\r\n\r\ninterface SideNavProps {\r\n  activeKey: string;\r\n  handleSelect: (key: string) => void;\r\n}\r\n\r\nexport default (props: SideNavProps) => {\r\n  const [expanded, setExpanded] = useState(true);\r\n  return (\r\n    <div style={{ width: '250px', height: '92%' }}>\r\n      <Sidenav\r\n        expanded={expanded}\r\n        activeKey={props.activeKey}\r\n        onSelect={props.handleSelect}\r\n        className='sidenav'\r\n      >\r\n        <Sidenav.Body>\r\n          <Nav>\r\n            <Nav.Item eventKey='1' icon={<Icon icon='dashboard' />}>\r\n              Dashboard\r\n            </Nav.Item>\r\n            <Nav.Item eventKey='2' icon={<Icon icon='group' />}>\r\n              User Group\r\n            </Nav.Item>\r\n            <Dropdown\r\n              placement='rightStart'\r\n              eventKey='3'\r\n              title='Advanced'\r\n              icon={<Icon icon='magic' />}\r\n            >\r\n              <Dropdown.Item eventKey='3-1'>Geo</Dropdown.Item>\r\n              <Dropdown.Item eventKey='3-2'>Devices</Dropdown.Item>\r\n              <Dropdown.Item eventKey='3-3'>Loyalty</Dropdown.Item>\r\n              <Dropdown.Item eventKey='3-4'>Visit Depth</Dropdown.Item>\r\n            </Dropdown>\r\n            <Dropdown\r\n              placement='rightStart'\r\n              eventKey='4'\r\n              title='Settings'\r\n              icon={<Icon icon='gear-circle' />}\r\n            >\r\n              <Dropdown.Item eventKey='4-1'>Applications</Dropdown.Item>\r\n              <Dropdown.Item eventKey='4-2'>Channels</Dropdown.Item>\r\n              <Dropdown.Item eventKey='4-3'>Versions</Dropdown.Item>\r\n              <Dropdown.Menu eventKey='4-5' title='Custom Action'>\r\n                <Dropdown.Item eventKey='4-5-1'>Action Name</Dropdown.Item>\r\n                <Dropdown.Item eventKey='4-5-2'>Action Params</Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </Nav>\r\n        </Sidenav.Body>\r\n        <IconButton\r\n          className='collapse-btn'\r\n          onClick={() => setExpanded(!expanded)}\r\n          icon={\r\n            <Icon\r\n              icon={expanded ? 'angle-double-left' : 'angle-double-right'}\r\n            />\r\n          }\r\n          size='lg'\r\n        ></IconButton>\r\n      </Sidenav>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport Navbar from './Navbar/Navbar';\r\nimport SideNav from './SideNav/SideNav';\r\n\r\nimport './MainLayout.css';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../store/reducers';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\ninterface MainLayoutProps {}\r\n\r\nexport default (props: MainLayoutProps) => {\r\n  const handleSelect = (key: string) => {};\r\n  \r\n  const currentUser = useSelector((state: AppState) => state.auth.currentUser);\r\n  if (!currentUser) {\r\n    const history = useHistory();\r\n    history.push('/auth/login');\r\n    return <></>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Navbar></Navbar>\r\n      <SideNav activeKey={'1'} handleSelect={handleSelect}></SideNav>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useRef, useCallback } from 'react';\r\nimport { Schema, Form, Button, Message } from 'rsuite';\r\nimport Input from '../../core/components/controls/Input';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState } from '../../store/reducers';\r\nimport { Link } from 'react-router-dom';\r\nimport { loginUserAction } from '../../store/actions/auth.actions';\r\n\r\nconst { StringType, NumberType } = Schema.Types;\r\nconst model = Schema.Model({\r\n  identification: NumberType(\r\n    'Por favor ingrese un numero de cedula valido.'\r\n  ).isRequiredOrEmpty('Este campo es obligatorio.'),\r\n  password: StringType('Por favor ingrese una contraseña valida.')\r\n    .isRequiredOrEmpty('Este campo es obligatorio.')\r\n    .minLength(6),\r\n});\r\n\r\nexport default () => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state: AppState) => state.auth.loading);\r\n  const [formValue, setFormValue] = useState({\r\n    identification: '',\r\n    password: '',\r\n  });\r\n  const error = useSelector((state: AppState) =>\r\n    state.auth.error ? state.auth.error : null\r\n  );\r\n  let form = useRef<any>(null);\r\n  console.log(error);\r\n  const submitLogin = useCallback(() => {\r\n    if (form.current.check()) {\r\n      dispatch(loginUserAction(formValue));\r\n    }\r\n  }, [dispatch, form, formValue]);\r\n  return (\r\n    <>\r\n      {error ? <Message showIcon type='error' description={error.message} /> : null}\r\n      <Form\r\n        ref={form}\r\n        fluid\r\n        onChange={(formValue) => setFormValue(formValue as any)}\r\n        formValue={formValue}\r\n        model={model}\r\n      >\r\n        <Input name='identification' label='Cedula' />\r\n        <Input name='password' label='Contraseña' type='password' />\r\n        <p>\r\n          <Link to='/auth/register'>Aun no tienes una cuenta ?</Link>\r\n        </p>\r\n        <p>\r\n          <Link to='/auth/passwordRecovery'>Olvidaste tu contraseña ?</Link>\r\n        </p>\r\n        <br></br>\r\n        <Button\r\n          loading={loading}\r\n          appearance='primary'\r\n          disabled={loading}\r\n          onClick={submitLogin}\r\n        >\r\n          Iniciar Sesion\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useRef, useCallback } from 'react';\r\nimport { Schema, Form, Button, Message, Grid, Row, Col } from 'rsuite';\r\nimport Input from '../../core/components/controls/Input';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState } from '../../store/reducers';\r\nimport { Link } from 'react-router-dom';\r\nimport { registerUserAction } from '../../store/actions/auth.actions';\r\n\r\nimport './RegisterForm.css';\r\n\r\nconst { StringType, NumberType, DateType } = Schema.Types;\r\nconst model = Schema.Model({\r\n  identification: NumberType(\r\n    'Por favor ingrese un numero de cedula valido.'\r\n  ).isRequired('Este campo es obligatorio.'),\r\n  email: StringType()\r\n    .isRequired()\r\n    .isEmail('El formato no es correcto.')\r\n    .maxLength(100),\r\n  name: StringType()\r\n    .isRequired('Este campo es obligatorio.')\r\n    .minLength(3)\r\n    .maxLength(100),\r\n  lastname: StringType()\r\n    .isRequired('Este campo es obligatorio.')\r\n    .minLength(3)\r\n    .maxLength(100),\r\n  birthdate: DateType().isRequired('Este campo es obligatorio.'),\r\n  password: StringType('Por favor ingrese una contraseña valida.')\r\n    .isRequired('Este campo es obligatorio.')\r\n    .minLength(6),\r\n  verifyPassword: StringType('Por favor ingrese una contraseña valida.')\r\n    .isRequired('Este campo es obligatorio.')\r\n    .minLength(6)\r\n    .addRule((value, data) => {\r\n      if (value !== data.password) return false;\r\n      return true;\r\n    }, 'Las contraseñas no coinciden.'),\r\n});\r\n\r\nexport default () => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state: AppState) => state.auth.loading);\r\n  const [formValue, setFormValue] = useState({\r\n    identification: 0,\r\n    email: '',\r\n    name: '',\r\n    lastname: '',\r\n    birthdate: new Date(),\r\n    password: '',\r\n    verifyPassword: '',\r\n  });\r\n  const error = useSelector((state: AppState) =>\r\n    state.auth.error ? state.auth.error : null\r\n  );\r\n  let form = useRef<any>(null);\r\n  const submitRegister = useCallback(() => {\r\n    if (form.current.check()) {\r\n      dispatch(registerUserAction(formValue));\r\n    }\r\n  }, [dispatch, form, formValue]);\r\n  return (\r\n    <>\r\n      {error ? (\r\n        <Message showIcon type='error' description={error.message} />\r\n      ) : null}\r\n      <Form\r\n        ref={form}\r\n        fluid\r\n        onChange={(formValue) => setFormValue(formValue as any)}\r\n        formValue={formValue}\r\n        model={model}\r\n      >\r\n        <Grid fluid>\r\n          <Row className='grid-row'>\r\n            <Col sm={24}>\r\n              <Input name='identification' label='Cedula' />\r\n            </Col>\r\n          </Row>\r\n          <Row className='grid-row'>\r\n            <Col sm={24}>\r\n              <Input name='email' label='Correo Electronico' />\r\n            </Col>\r\n          </Row>\r\n          <Row className='grid-row'>\r\n            <Col sm={24} md={12}>\r\n              <Input name='name' label='Nombre' />\r\n            </Col>\r\n            <Col sm={24} md={12}>\r\n              <Input name='lastname' label='Apellido' />\r\n            </Col>\r\n          </Row>\r\n          <Row className='grid-row'>\r\n            <Col sm={24} md={12}>\r\n              <Input name='birthdate' label='Fecha de Nacimiento' type='date' />\r\n            </Col>\r\n          </Row>\r\n          <Row className='grid-row'>\r\n            <Col sm={24} md={12}>\r\n              <Input name='password' label='Contraseña' type='password' />\r\n            </Col>\r\n            <Col sm={24} md={12}>\r\n              <Input\r\n                name='verifyPassword'\r\n                label='Repetir contraseña'\r\n                type='password'\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Grid>\r\n        <p>\r\n          <Link to='/auth/login'>Ya tienes una cuenta ? Inicia Sesion</Link>\r\n        </p>\r\n        <br></br>\r\n        <Button\r\n          loading={loading}\r\n          appearance='primary'\r\n          disabled={loading}\r\n          onClick={submitRegister}\r\n        >\r\n          Registrarse\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useRef, useCallback } from 'react';\r\nimport { Form, Button, Message, HelpBlock, Schema } from 'rsuite';\r\nimport Input from '../../core/components/controls/Input';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState } from '../../store/reducers';\r\nimport {\r\n  sendRecoveryCodeAction,\r\n  submitRecoveryCodeAction,\r\n  resetPasswordAction,\r\n} from '../../store/actions/auth.actions';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst resetPassModel = Schema.Model({\r\n  email: Schema.Types.StringType().isEmail().isRequired(),\r\n  password: Schema.Types.StringType().isRequired('Este campo es obligatorio.'),\r\n  verifyPassword: Schema.Types.StringType(\r\n    'Por favor ingrese una contraseña valida.'\r\n  )\r\n    .isRequired('Este campo es obligatorio.')\r\n    .minLength(6)\r\n    .addRule((value, data) => {\r\n      if (value !== data.password) return false;\r\n      return true;\r\n    }, 'Las contraseñas no coinciden.'),\r\n});\r\n\r\nexport default () => {\r\n  const loading = useSelector((state: AppState) => state.auth.loading);\r\n  const error = useSelector((state: AppState) =>\r\n    state.auth.error ? state.auth.error : null\r\n  );\r\n  const currentResetEmail = useSelector(\r\n    (state: AppState) => state.auth.currentResetEmail\r\n  );\r\n  const message = useSelector((state: AppState) => state.auth.message);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [stage, setStage] = useState(1);\r\n\r\n  const [sendCodeFormValue, setSendCodeFormValue] = useState({\r\n    identification: '',\r\n  });\r\n  const [submitCodeFormValue, setSubmitCodeFormValue] = useState({\r\n    email: '',\r\n    code: '',\r\n  });\r\n  const [resetPassFormValue, setResetPassFormValue] = useState({\r\n    email: '',\r\n    password: '',\r\n    verifyPassword: '',\r\n  });\r\n\r\n  let form = useRef<any>(null);\r\n\r\n  const sendCode = useCallback(() => {\r\n    if (sendCodeFormValue.identification !== '') {\r\n      dispatch(sendRecoveryCodeAction(sendCodeFormValue.identification));\r\n    }\r\n  }, [dispatch, sendCodeFormValue]);\r\n\r\n  const submitCode = useCallback(() => {\r\n    if (submitCodeFormValue.code !== '') {\r\n      dispatch(submitRecoveryCodeAction(submitCodeFormValue));\r\n    }\r\n  }, [submitCodeFormValue, dispatch]);\r\n\r\n  const resetPassword = useCallback(() => {\r\n    if (form.current.check()) {\r\n      dispatch(resetPasswordAction(resetPassFormValue));\r\n    }\r\n  }, [form, dispatch, resetPassFormValue]);\r\n\r\n  if (currentResetEmail && stage === 1) {\r\n    setSubmitCodeFormValue({\r\n      email: currentResetEmail,\r\n      code: '',\r\n    });\r\n    setStage(2);\r\n  } else if (message !== '' && stage === 2) {\r\n    setResetPassFormValue({\r\n      email: currentResetEmail,\r\n      password: '',\r\n      verifyPassword: '',\r\n    });\r\n    setStage(3);\r\n  }\r\n\r\n  switch (stage) {\r\n    case 1:\r\n      return (\r\n        <>\r\n          {error ? (\r\n            <Message showIcon type='error' description={error.message} />\r\n          ) : null}\r\n          <Form\r\n            ref={form}\r\n            fluid\r\n            onChange={(formValue) => setSendCodeFormValue(formValue as any)}\r\n            formValue={sendCodeFormValue}\r\n          >\r\n            <Input name='identification' label='Cedula' />\r\n            <HelpBlock>\r\n              Ingresa tu cedula y enviaremos un codigo a tu correo electronico\r\n              asociado que te servirá para recuperar tu contraseña.\r\n            </HelpBlock>\r\n            <br></br>\r\n            <Button\r\n              loading={loading}\r\n              appearance='primary'\r\n              disabled={loading}\r\n              onClick={sendCode}\r\n            >\r\n              Solicitar Codigo\r\n            </Button>\r\n          </Form>\r\n        </>\r\n      );\r\n    case 2:\r\n      return (\r\n        <>\r\n          <Message\r\n            showIcon\r\n            type='warning'\r\n            description='No recargues ni dejes esta pagina!'\r\n          />\r\n          {error ? (\r\n            <Message showIcon type='error' description={error.message} />\r\n          ) : null}\r\n          <Form\r\n            ref={form}\r\n            fluid\r\n            onChange={(formValue) => setSubmitCodeFormValue(formValue as any)}\r\n            formValue={submitCodeFormValue}\r\n          >\r\n            <Input name='code' label='Codigo de recuperación' />\r\n\r\n            <HelpBlock>\r\n              Ingresa el codigo que te hemos enviado al correo para recuperar tu\r\n              contraseña.\r\n            </HelpBlock>\r\n            <br></br>\r\n            <Button\r\n              loading={loading}\r\n              appearance='primary'\r\n              disabled={loading}\r\n              onClick={submitCode}\r\n            >\r\n              Enviar Codigo\r\n            </Button>\r\n          </Form>\r\n        </>\r\n      );\r\n    case 3:\r\n      return (\r\n        <>\r\n          {message ? (\r\n            <Message\r\n              showIcon\r\n              type='success'\r\n              description={\r\n                <p>\r\n                  {message}\r\n                  <br />\r\n                  {message.includes('recuperado') ? <Link to=\"/auth/login\">Ir a la pagina de login</Link> : null}\r\n                </p>\r\n              }\r\n            />\r\n          ) : null}\r\n          {error ? (\r\n            <Message showIcon type='error' description={error.message} />\r\n          ) : null}\r\n          <Form\r\n            ref={form}\r\n            fluid\r\n            onChange={(formValue) => setResetPassFormValue(formValue as any)}\r\n            formValue={resetPassFormValue}\r\n            model={resetPassModel}\r\n          >\r\n            <Input name='password' label='Nueva contraseña' type='password' />\r\n            <Input\r\n              name='verifyPassword'\r\n              label='Repetir nueva contraseña'\r\n              type='password'\r\n            />\r\n\r\n            <HelpBlock>\r\n              Ingresa el codigo que te hemos enviado al correo para recuperar tu\r\n              contraseña.\r\n            </HelpBlock>\r\n            <br></br>\r\n            <Button\r\n              loading={loading}\r\n              appearance='primary'\r\n              disabled={loading}\r\n              onClick={resetPassword}\r\n            >\r\n              Reestablecer contraseña\r\n            </Button>\r\n          </Form>\r\n        </>\r\n      );\r\n    default:\r\n      return <></>;\r\n  }\r\n};\r\n","import React from 'react';\r\nimport {\r\n  Container,\r\n  Header,\r\n  Navbar,\r\n  Content,\r\n  FlexboxGrid,\r\n  Panel,\r\n  Footer,\r\n} from 'rsuite';\r\nimport {\r\n  Route,\r\n  RouteComponentProps,\r\n  Switch,\r\n  useHistory,\r\n} from 'react-router-dom';\r\nimport LoginForm from '../../auth/LoginForm/LoginForm';\r\n\r\nimport './AuthLayout.css';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../store/reducers';\r\nimport RegisterForm from '../../auth/registerForm/RegisterForm';\r\nimport PasswordRecoveryForm from '../../auth/PasswordRecoveryForm/PasswordRecoveryForm';\r\n\r\ninterface AuthLayoutProps {}\r\n\r\nexport default (props: RouteComponentProps<AuthLayoutProps>) => {\r\n  const currentUser = useSelector((state: AppState) => state.auth.currentUser);\r\n  if (currentUser) {\r\n    const history = useHistory();\r\n    history.push('/app');\r\n    return <></>;\r\n  }\r\n  return (\r\n    <Container style={{ height: '100%' }}>\r\n      <Header>\r\n        <Navbar appearance='inverse'>\r\n          <Navbar.Header>URUOnline</Navbar.Header>\r\n        </Navbar>\r\n      </Header>\r\n      <Content className='auth-background'>\r\n        <FlexboxGrid justify='center' align='middle' style={{ height: '100%' }}>\r\n          <FlexboxGrid.Item colspan={12}>\r\n            <Panel\r\n              className='form-panel'\r\n              header={\r\n                <Switch>\r\n                  <Route\r\n                    exact\r\n                    path={props.match.path + '/login'}\r\n                    render={() => (\r\n                      <h1 style={{ color: 'black' }}>Iniciar Sesion</h1>\r\n                    )}\r\n                  />\r\n                  <Route\r\n                    exact\r\n                    path={props.match.path + '/register'}\r\n                    component={() => (\r\n                      <h1 style={{ color: 'black' }}>Registrarse</h1>\r\n                    )}\r\n                  />\r\n                </Switch>\r\n              }\r\n              bordered\r\n            >\r\n              <Route\r\n                exact\r\n                path={props.match.path + '/login'}\r\n                component={LoginForm}\r\n              />\r\n              <Route\r\n                exact\r\n                path={props.match.path + '/register'}\r\n                component={RegisterForm}\r\n              />\r\n              <Route\r\n                exact\r\n                path={props.match.path + '/passwordRecovery'}\r\n                component={PasswordRecoveryForm} \r\n              />\r\n            </Panel>\r\n          </FlexboxGrid.Item>\r\n        </FlexboxGrid>\r\n      </Content>\r\n      <Footer>Footer</Footer>\r\n    </Container>\r\n  );\r\n};\r\n","import React, { useEffect } from 'react';\nimport './App.css';\n\nimport 'rsuite/dist/styles/rsuite-dark.css';\nimport MainLayout from './hoc/MainLayout/MainLayout';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { checkAuthenticatedAction } from './store/actions/auth.actions';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport AuthLayout from './hoc/AuthLayout/AuthLayout';\nimport { Loader } from 'rsuite';\nimport { AppState } from './store/reducers';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const checked = useSelector(\n    (state: AppState) => state.auth.authenticatedChecked\n  );\n\n  useEffect(() => {\n    dispatch(checkAuthenticatedAction());\n  }, [dispatch]);\n\n  const mainclasses = ['main-container'];\n  !checked && mainclasses.push('loader-container');\n\n  return (\n    <div className='App'>\n      <div className={mainclasses.join(' ')}>\n        {!checked ? (\n          <Loader size='lg' content=\"Cargando...\" />\n        ) : (\n          <Switch>\n            <Redirect exact path=\"/\" to=\"/auth/login\" />\n            <Route path='/auth' component={AuthLayout} />\n            <Route path='/app' exact component={MainLayout} />\n          </Switch>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { User } from '../../core/models/User.model';\r\nimport { Action } from '../actions/action.model';\r\nimport { authActions } from '../actions';\r\nimport { ApiError } from '../../core/models/ApiError.model';\r\n\r\nexport interface AuthState {\r\n  authenticatedChecked: boolean;\r\n  currentUser: User | null;\r\n  currentResetEmail: string;\r\n  loading: boolean;\r\n  error: ApiError | null;\r\n  message: string;\r\n}\r\n\r\nconst initialState: AuthState = {\r\n  authenticatedChecked: false,\r\n  currentUser: null,\r\n  currentResetEmail: '',\r\n  loading: true,\r\n  error: null,\r\n  message: '',\r\n};\r\n\r\nexport const authReducer = (\r\n  state: AuthState = initialState,\r\n  action: Action\r\n) => {\r\n  switch (action.type) {\r\n    case authActions.CHECK_AUTHENTICATED:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      };\r\n    case authActions.CHECK_AUTHENTICATED_SUCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        currentUser: action.payload,\r\n        authenticatedChecked: true,\r\n      };\r\n    case authActions.CHECK_AUTHENTICATED_FAIL:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        authenticatedChecked: true,\r\n      };\r\n    case authActions.LOGIN_USER:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        currentUser: null,\r\n      };\r\n    case authActions.LOGIN_USER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        currentUser: action.payload,\r\n      };\r\n    case authActions.LOGIN_USER_FAIL:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload,\r\n      };\r\n    case authActions.REGISTER_USER:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        currentUser: null,\r\n        error: null,\r\n      };\r\n    case authActions.LOGOUT_USER:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null,\r\n      };\r\n    case authActions.LOGOUT_USER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        currentUser: null,\r\n      };\r\n    case authActions.SEND_RECOVERY_CODE:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null,\r\n        message: ''\r\n      };\r\n    case authActions.SEND_RECOVERY_CODE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: null,\r\n        currentResetEmail: action.payload.email,\r\n        // message: action.payload.message,\r\n      };\r\n    case authActions.SUBMIT_RECOVERY_CODE:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null,\r\n        message: '',\r\n      };\r\n    case authActions.SUBMIT_RECOVERY_CODE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        message: action.payload.message,\r\n      };\r\n    case authActions.RESET_PASSWORD:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null,\r\n      };\r\n    case authActions.RESET_PASSWORD_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        message: action.payload.message,\r\n        currentResetEmail: null,\r\n      };\r\n    case authActions.AUTH_ACTION_FAIL:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { authReducer, AuthState } from './auth.reducer';\r\n\r\nexport interface AppState {\r\n    auth: AuthState\r\n}\r\n\r\nexport default combineReducers({\r\n  auth: authReducer\r\n});\r\n","import axios from 'axios';\r\n\r\n\r\nconst api = axios.create({\r\n    baseURL: ''\r\n});\r\n\r\napi.defaults.withCredentials = true;\r\n\r\nexport default api;","import { put } from 'redux-saga/effects';\r\nimport api from '../../core/axios';\r\nimport { Action } from '../actions/action.model';\r\nimport { authActions } from '../actions/index';\r\n\r\nexport function* checkAuthenticatedEffect(action: Action) {\r\n  try {\r\n    const { data } = yield api.get('/auth');\r\n    console.log(data);\r\n    yield put(authActions.checkAuthenticatedSuccessAction(data));\r\n  } catch (error) {\r\n    yield put(authActions.checkAuthenticatedFailAction());\r\n  }\r\n}\r\n\r\nexport function* loginUserEffect(action: Action) {\r\n  try {\r\n    const { data } = yield api.post('/auth/login', action.payload);\r\n    console.log(data);\r\n    yield put(authActions.loginUserSuccessAction(data));\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(\r\n      authActions.loginUserFailAction({\r\n        message: error.message,\r\n        stack: error.stack,\r\n        status: error.response.status,\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nexport function* registerUserEffect(action: Action) {\r\n  try {\r\n    const { data } = yield api.post('/auth/register', action.payload);\r\n    console.log(data);\r\n    yield put(authActions.registerUserSuccessAction(data));\r\n  } catch (error) {\r\n    yield put(\r\n      authActions.authActionFail(error.response.data)\r\n    );\r\n  }\r\n}\r\n\r\nexport function* logoutUserEffect(action: Action) {\r\n  try {\r\n    yield api.get('/auth/logout');\r\n    yield put(authActions.logoutUserSuccessAction());\r\n  } catch (error) {\r\n    yield put(\r\n      authActions.authActionFail({\r\n        message: error.message,\r\n        stack: error.stack,\r\n        status: error.response.status,\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nexport function* sendRecoveryCodeEffect(action: Action) {\r\n  try {\r\n    const { data } = yield api.get('/auth/passResetCode?id=' + action.payload);\r\n    yield put(authActions.sendRecoveryCodeSuccessAction(data));\r\n  } catch (error) {\r\n    yield put(\r\n      authActions.authActionFail(error.response.data)\r\n    );\r\n  }\r\n}\r\n\r\nexport function* submitRecoveryCodeEffect(action: Action) {\r\n  try {\r\n    const { data } = yield api.post('/auth/passResetCode', action.payload);\r\n    yield put(authActions.submitRecoveryCodeSuccessAction(data));\r\n  } catch (error) {\r\n    yield put(\r\n      authActions.authActionFail(error.response.data)\r\n    );\r\n  }\r\n}\r\n\r\nexport function* resetPasswordEffect(action: Action) {\r\n  try {\r\n    const { data } = yield api.post('/auth/resetPass', action.payload);\r\n    yield put(authActions.resetPasswordSuccessAction(data));\r\n  } catch (error) {\r\n    yield put(\r\n      authActions.authActionFail(error.response.data)\r\n    );\r\n  }\r\n}\r\n\r\nexport {};\r\n","import { takeEvery } from 'redux-saga/effects';\r\nimport { authActions } from '../actions';\r\nimport { checkAuthenticatedEffect, loginUserEffect, registerUserEffect, logoutUserEffect, sendRecoveryCodeEffect, resetPasswordEffect, submitRecoveryCodeEffect } from './auth.effects';\r\n\r\nexport function* watchAuth() {\r\n  yield takeEvery(authActions.CHECK_AUTHENTICATED, checkAuthenticatedEffect);\r\n  yield takeEvery(authActions.LOGIN_USER, loginUserEffect);\r\n  yield takeEvery(authActions.REGISTER_USER, registerUserEffect);\r\n  yield takeEvery(authActions.LOGOUT_USER, logoutUserEffect);\r\n  yield takeEvery(authActions.SEND_RECOVERY_CODE, sendRecoveryCodeEffect);\r\n  yield takeEvery(authActions.SUBMIT_RECOVERY_CODE, submitRecoveryCodeEffect);\r\n  yield takeEvery(authActions.RESET_PASSWORD, resetPasswordEffect);\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport reducer from './store/reducers';\nimport { watchAuth } from './store/effects';\n\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(reducer, composeEnhancers(\n  applyMiddleware(sagaMiddleware)\n));\n\nsagaMiddleware.run(watchAuth);\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}